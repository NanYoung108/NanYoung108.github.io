<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机基础知识总结</title>
    <link href="/2023/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <url>/2023/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>一、计算机系统（思维导图链接：<a href="https://gitmind.cn/app/docs/mn2obaay%EF%BC%89">https://gitmind.cn/app/docs/mn2obaay）</a><br>  计算机系统由硬件(Hardware)系统和软件(Software)系统两大部分组成，计算机硬件组成。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构知识点总结</title>
    <link href="/2023/04/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>一，数据结构的一般概念<br>数据：所有能被输入到计算机并被处理的符号的集合</p><p>数据元素：数据的基本单位。</p><p>数据项：构成数据的不可分割的最小单位，一个数据元素有若干个数据项组成。</p><p>数据对象：相同性质的数据元素的集合，是数据的一个子集。</p><p>数据类型：一个值的集合和定义在这个集合上的一组操作的总成。</p><p>原子类型：值不可在分割的数据类型。</p><p>结构类型：值不可在分解成若干的数据类型。</p><p>抽象数据类型：抽象数据组织和与之相关的操作。</p><p>抽象数据类型（ADT):一个数学模型以及定义在该模型上的一组操作。其定义只与逻辑特性有关，通常采用（数据对象，数据关系，基本操作集）这样的三元来表示抽象数据类型。</p><p>数据结构：相互之间存在的一种或多种特定关系的数据元素的集合，包括：逻辑结构，存储结构和数据的运算。</p><p>数据的三要素：逻辑结构，物理结构，数据元素。</p><p>数据的逻辑结构：数据元素之间的逻辑关系。<br>集合：结构中的数据元素之间除了“同属一个集合”的关系之外，没有任何关系。</p><p>线性结构：结构中的数据元素之间只存在一对一的关系。</p><p>树形结构：结构中的数据元素之间存在一对多的关系。</p><p>图状结构或网状结构：结构中的数据元素之间存在多对多的关系。</p><p>数据的存储结构：数据结构在计算机中的表示，也称物理结构。</p><p>顺序存储：把逻辑上相邻的元素存储在物理位置上相邻的存储单元里，通过存储单元的邻接关系来表示元素之间的逻辑关系。</p><pre><code class="hljs">   优点：实现随机存储，每个元素占用空间小。   缺点：只能使用相邻的一整块存储单元，会产生较多的外部碎片。</code></pre><p>链式存储：不要求逻辑上相邻的元素在物理位置上也相邻，通过指针表示元素之间的逻辑关系。</p><pre><code class="hljs">   优点：不会出现碎片现象，充分利用所有的存储单元。   缺点：每个元素要占用存储指针，需要多占用部分存储空间，而且只能顺序存取。</code></pre><p>索引存储：存储信息的同时，建立附加的索引表，索引表中的每一项成为索引项，索引项的一般形式（关键字，地址）</p><pre><code class="hljs">   优点：检索速度快。  缺点：增加索引表，占用较多存储空间，增删数据时也要修改索引表，花费较多的时间。</code></pre><p>散列存储：根据元素的关键字直接计算出该元素的存储位置，也称Hash存储</p><pre><code class="hljs">   优点：检索，增删节点操作都很快  缺点：散列函数不好可能会出现元素存储单元的冲突，解决冲突会增加时间 ，空间的开销。</code></pre><p>算法的基本概念：</p><p> 算法对特定问题求解步骤的一种描述，它是指令的有限序列，期中每一条指令都表示一个或多个操作。</p><p>算法的5个重要性：有穷性，确定性，可行性，输入，输出。</p><p>算法设计的要求：正确性，可读性，健壮性，效率与低存储需求。</p><p>算法效率的度量：</p><pre><code class="hljs">                      通常用时间复杂度和空间复杂度来描述。</code></pre><p>时间复杂度：算法中所有语句的频度（指该语句在算法中被重复执行的次数）之和记作T(n),时间复杂度主要分析T(n)的数量级。</p><p>算法中的基本运算(最深层循环内的语句）的频度与T(n)同数量级，所以一般采用算法中最基本的频度f(n)来分析算法时间复杂的度。即T(n)&#x3D;O(f(n))</p><p>空间复杂度：算法耗费的存储空间，记作S(n)&#x3D;O(g(n))</p><p>算法原地工作指算法所需要辅助空间是常量，即O(1）</p><p>二，线性表的定义和基本操作<br>线性表的定义： 具有相同数据类型的n(N&gt;&#x3D;0)个数据元素的有限序列。</p><p>线性表的特点：</p><pre><code class="hljs">                  1.除第一个元素外，每个元素有且仅有一个直接前驱，除最后一个元素外，每个元素有且仅有一个直接后继                  2.表中元素个数有限                  3.表中元素具有逻辑上的顺序关系                  4.表中每个元素都是数据元素，每个元素都是单个元素                  5.表中元素的数据类型都相同，即每个元素占有相同大小的存储空间                  6.表中元素具有抽象性，即只关注与逻辑结构，不关注于元素表示的内容                  7.线性表示一种逻辑结构 ，表示元素之间一对一的相邻关系；顺序表和链表是存储结构，表示物理结构</code></pre><p>线性表的基本操作：</p><pre><code class="hljs">               InitList(&amp;L):初始化表               Length(L):求表长               LocateElem(L,e)：按值查找操作               GetElem(L,i):按位查找操作               ListInsert(&amp;L,e):插入操作               ListDelete(&amp;L,i,&amp;e):删除操作               Print List(L)：输出操作               Empty(L):判空操作               DestroyList(&amp;L):销毁操作</code></pre><p>线性表的顺序表示<br>顺序表的定义：用一组连续的存储单元，一次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理位置上也相邻。</p><p>顺序表的特点：随机访问，并且存储密度高，但是增删操作需要移动大量元素</p><p>线性表的链式表示<br>单链表的定义：</p><pre><code class="hljs">      通过一组任意的存储单元来存储线性表中的数据元素，每个链表节点除了放自身的信息外，还要存放一个指向后继的指针，其中data为数据域。next为指针域。</code></pre><p>1.单链表中的元素是离散的分布在存储空间中的。所以是非随机存储结构，想找到某个元素必须从头遍历。</p><p>2.通常用头指针标识一个单链表，此外，在单链表的第一个结点之前附加一个节点，称之为头节点。头结点中可以不加任何信息，也可以记录表长等。</p><p>引入头结点的优点：</p><pre><code class="hljs"> 开始节点放在头结点的指针域中，所以链表的第一个节点位置上的操作与其他位置上的操作一致，不需要特殊处理。若链表为空，头指针是指向头结点的非空指针（头结点的指针域为空），所以空表与非空表的处理统一。</code></pre><p>   单链表解决了顺序表需要大量连续存储空间的缺点，但是单链表附加了指针域，也存在浪费存储空间的缺点。<br>双向链表：<br>   双向链表是单链表中有一个指向后继节点的指针next的基础上，增加了一个指向前驱节点的指针prior<br> 循环链表</p><pre><code class="hljs">循环单链表：在单链表的基础上，表中最后一个节点的指针不是NULL,而是改为指向头结点，整个链表形成一个环。</code></pre><p>   因为没有指针域为NULL的节点，所以，循环单链表的判空条件不是头结点的指针是否为空，而是它是否等于头指针。</p><pre><code class="hljs">插入，删除操作算法与单链表一致，只是在尾部操作不同，</code></pre><p>  循环双向链表：在双向链表的基础上，表中最后一个节点的指针不是NULL，而是改为指向头结点，整个链表形成一个环。</p><p>  判空条件为头结点的prior域和next域都等于头结点。 </p><p>静态链表</p><pre><code class="hljs"> 静态链表是借助数组来描述线性表的链式存储结构，节点也有数据域data和指针域next，不过这里的指针域指的数组下标（游标）</code></pre><p>顺序表和单链表的比较</p><p>1.存取方式</p><p>顺序表可以顺序存取，也可以随机存取；链表只能顺序存取</p><p>2.逻辑结构和物理结构</p><p>顺序表，逻辑上相邻的元素，物理位置上也相邻；链表，逻辑上相邻，物理位置上不一定相邻</p><p>3.查找,插入和删除操作时间复杂度</p><p>按值查找：顺序表无序时，两者时间复杂度都为O(n)；当顺序表有序时，可以采用折半查找，时间复杂度O(log2 n)</p><p>按位查找：顺序表随机访问，时间复杂度为链表平均时间复杂度为O(n)</p><p>三，其他线性结构<br>栈</p><p>栈的基本概念</p><p>栈的定义：只允许一端进行插入和删除操作的线性表</p><p>栈顶：栈允许进行插入和删除的那一端</p><p>栈底：固定的，不允许进行插入和删除的一端。</p><p>栈是一个先进后出的线性表</p><p>栈的基本操作</p><p>InitStack(&amp;S)：栈的初始化<br>StackEmpty(S)：判断栈是否为空<br>Push(&amp;S,x)：进栈<br>Pop(&amp;S,&amp;x)：出栈<br>GetTop(S,&amp;x)：读栈顶元素<br>ClearStack(&amp;S)：销毁栈<br>共享栈<br>利用栈底位置不变的特性，让两个栈共享一个一维数组空间，将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸</p><p>top0&#x3D;-1是0号栈为空，top1&#x3D;MaxSize时1号栈为空<br>仅当两个栈顶指针相邻时，判断为栈满<br>链栈</p><p>采用链式存储的栈，通常采用单链表实现，并规定所有操作在单链表的表头进行，且链栈没有头结点，Lhead指向栈顶元素<br>队列<br>队列的基本概念<br>队列的定义：只允许在表的一段进行插入，表的另一端进行删除</p><p>队头：允许删除的一端<br>队尾：允许插入的一端<br>空队列：不含任何元素的空表<br>队列是一个先进先出的线性表<br>队列的基本操作</p><p>InitQueue(&amp;Q)：初始化队列<br>QueueEmpty(Q)：判队列空<br>EnQueue(&amp;Q)：入队<br>DeQueue(&amp;Q,&amp;x)：出队<br>GetHead(Q,&amp;x)：读队头元素<br>队列的顺序存储结构<br>队列的顺序存储</p><p>分配一块连续的存储单元存放队列中的元素，并设置两个指针front和rear分别指示队头元素和队尾元素的位置。</p><p>循环队列</p><p>将顺序队列想象成一个环状空间，也就是逻辑上将存储队列元素的表看成一个环，即循环队列</p><p>初始时：Q.front&#x3D;Q.rear&#x3D;0<br>对首指针进1：Q.front&#x3D;(Q.front+1)%MaxSize<br>对尾指针进1：Q.rear&#x3D;(Q.rear+1)%MaxSize<br>队列长度：(Q.rear+MaxSize-Q.front)%MaxSize<br>队满判断：一般有三种<br>牺牲一个单元来区分队空队满，即队头指针在队尾指针的下一位置作为队满的标志<br>队满条件：(Q.rear+1)%MaxSize&#x3D;&#x3D;Q.front<br>队空条件：Q.front&#x3D;&#x3D;Q.front<br>队列中元素的个数：(Q.rear-Q.front+MaxSize)%MaxSize<br>类型中增设表示元素个数的数据成员size，则队空条件为Q.size&#x3D;0，队满条件为Q.size&#x3D;MaxSize，两种情况中都有Q.front&#x3D;Q.rear<br>类型中增设tag数据成员，区分队空还是队满。则tag等于0的情况下，因删除导致Q.front&#x3D;&#x3D;Q.rear则为队空，tag&#x3D;1的情况下，因插入导致Q.front&#x3D;&#x3D;Q.rear则为队满</p><p>双端队列</p><p>双端队列是指允许两端都可以进行入队和出队操作的</p><p>输出受限的双端队列：允许一端进行插入和删除，但在另一端只允许插入的双端队列<br>输入受限的双端队列：允许一端进行插入和删除，但在另一端只允许删除的双端队列</p><p>矩阵</p><p>压缩矩阵：指多个值相同的元素只分配一个存储空间，对零元素不分配存储空间。其目的是为了节省存储空间<br>特殊矩阵：指具有许多相同矩阵元素或零元素，并且这些相同矩阵元素或零元素的分布有一定规律性的矩阵。常见特殊矩阵有对称矩阵、上（下）三角矩阵、对角矩阵等<br>特殊矩阵的压缩存储方法：找出特殊矩阵中值相同的矩阵元素的分布规律，把那些呈现规律性分布的值的多个矩阵元素压缩存储到一个存储空间中</p><p>对称矩阵<br>元素下标的对应关系<br>k &#x3D; i * ( i - 1 ) &#x2F; 2 + j - 1 ; i &gt;&#x3D; j<br>k &#x3D; j * ( j - 1 ) &#x2F; 2 + i - 1 ; i &lt; j<br>三角矩阵<br>下三角矩阵元素下标的对应关系<br>k &#x3D; i * ( i - 1 ) &#x2F; 2 + j - 1 ; i &gt;&#x3D; j<br>k &#x3D; n * ( n + 1 ) &#x2F; 2 ; i &lt; j<br>上三角矩阵元素下标的对应关系<br>k &#x3D; ( i - 1 ) * ( 2n - i + 2 ) &#x2F; 2 + ( j - i ) ; i &lt;&#x3D; j<br>k &#x3D; n * ( n + 1 ) &#x2F; 2 ; i &gt; j<br>三对角矩阵<br>元素下标的对应关系<br>k &#x3D; 3 * ( i - 1 ) - 1 + j - i + 1 &#x3D; 2i + j - 3<br>已知k求i、j<br>i &#x3D; [ ( k + 1 ) &#x2F; 3 + 1 ] ; j &#x3D; k - 2i + 3<br>稀疏矩阵</p><p>矩阵元素个数远大于非零元素个数的矩阵</p><p>一般采用三元组（行标，列标，值）的形式存储<br>稀疏矩阵压缩存储后失去随机存取特性<br>四、树和二叉树<br>1．掌握树型结构的定义。</p><p>2．掌握二叉树的定义、性质及各种存贮结构。</p><p>3．掌握遍历二叉树、线索二叉树及其他基本操作。</p><p>4．掌握树、森林与二叉树的相互转换；理解树的遍历；掌握哈夫曼树及其应用。</p><p>五、图<br>1．掌握图的定义和术语。</p><p>2．掌握图的存贮结构；理解图的基本操作。</p><p>3．掌握图的遍历算法；了解利用图的遍历解决图的应用问题。</p><p>4．理解图的有关应用：求最小生成树、求最短路径、拓扑排序及关键路径等算法的基本思想。</p><p>六、查找<br>1．掌握静态查找表。</p><p>2．掌握二叉排序树和平衡二叉树。</p><p>3．理解B－树；了解B＋树。</p><p>4．掌握哈希表。</p><p>5．掌握各种查找方法的时间性能分析。</p><p>七、内部排序<br>1．掌握直接插入排序、希尔排序、冒泡排序、快速排序、简单选择排序、堆排序、归并排序；理解基数排序。</p><p>2．学会各种内部排序方法的比较（时间复杂度、空间复杂度、稳定性）。</p><p>原文链接：<a href="https://blog.csdn.net/qq_45228323/article/details/105831244">https://blog.csdn.net/qq_45228323/article/details/105831244</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言相关知识</title>
    <link href="/2023/04/24/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/24/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>什么是汇编语言？<br>汇编语言是直接在硬件之上工作的编程语言，学习汇编语言之前最好先了解一下计算机硬件系统的结构和工作原理。学习汇编语言的重点是学习如何利用硬件系统的编程结构和指令集进而有效地灵活地控制系统执行工作</p><p>为什么要学习汇编语言呢？<br>汇编语言，是除了机器语言外的最底层的编程语言了。学习这门语言，可以帮助我们更加深入地理解CPU、内存等硬件的工作原理。用机器的思维去操作计算机。汇编语言和机器语言是一一对应的，汇编语言被编译成机器语言，这样的程序执行效率更高。</p><p>计算机的底层用的是二进制，0和1，0表示“不打孔”，1表示“打孔”。机器语言的劣势是，一旦程序出了bug，很难排查错误，甚至是几乎不可能排查出错误。正是因为这样的原因，才有了汇编语言的产生。</p><p>关于汇编语言的产生<br>汇编语言的主体是汇编指令，汇编指令和机器指令的差别在于指令的表示方法上，汇编指令是机器指令的助记符，汇编指令是更便于记忆的一种书写格式。它较为有效地解决了机器指令编写程序难度大的问题，汇编语言与人类语言更接近，便于阅读和记忆。使用编译器，可以把汇编程序转译成机器指令程序。</p><p>什么是寄存器？<br>寄存器可以理解为CPU中的存储器或者内存，是CPU中可以存储数据的器件，一个CPU中可以有多个寄存器。上述示例中的 AX 、BX 就是寄存器的代号。</p><p>关于编译与反编译<br>计算机只能读懂机器指令（如 1000100111011000），那么该如何让计算机执行我们用汇编语言（如MOV AX, BX）编写的程序呢？<br>这就需要对汇编程序进行编译，即将其翻译成由机器指令组成的机器码，如此计算机就能执行汇编程序上。本质上，计算执行的仍然是机器指令，而非汇编指令。对更多高级的编程语言（比如 C++ 等），使用高级语言编写的程序同样需要先转译成汇编程序，再编译成机器码，从而进一步地在机器上运行。这个过程，即编译过程。<br>把机器码程序（机器指令程序）转译成汇编指令，即反编译过程</p><p>汇编语言的组成 汇编语言由以下3类指令组成：<br>1）汇编指令（与机器指令一一对应，它是机器码的助记符）<br>2）伪指令（由编译器识别并执行）<br>3）其它符号（由编译器识别并执行）<br>汇编语言的核心是汇编指令，汇编指令决定了汇编程序的特性</p><p>什么是内存？<br>内存是计算机结构中最主要的一个存储器，仅此而已。存储器不等于内存，比如显卡中的显存也属于存储器，所以存储器包括了内存、显存等多种类型的存储器。在一台PC机中，内存的作用仅次于CPU。离开了内存，性能再好的CPU也无法工作。磁盘不同于内存，磁盘中的数据或程序如果不讲到内存中去，它就无法被CPU使用。所以，学习汇编语言基本上就是在学习CPU如何调用并使用内存中的数据。</p><p>什么是存储器？<br>CPU是计算机的核心部件，它控制着整个计算机的运作并进行系统运算，要想让CPU工作，就必须向它提供机器指令和数据，指令是告诉CPU怎么做，数据是CPU执行任务的原材料。这些机器指令和数据是存放在存储器中的。计算机中大多数的硬件都有存储器，除了CPU外，显卡、BIOS等也都有自己独立的存储器。<br>存储器的存储容量单位是字节（Byte，一个字节有8位 bit，即2的8次方），1KB&#x3D;1024Byte，1MB&#x3D;1024KB，1GB&#x3D;1024MB，1TB&#x3D;1024GB。<br>磁盘的容量单位和存储器的容量单位是一样的。Byte单位是微机中最最常用的计量单位。<br>那么CPU是通过什么将地址信息、控制信息和数据信息传递到存储器芯片中的呢？<br>我们知道，电子计算机能处理和传输的信息都是电信号，电信号是使用导线来传送的，所以CPU也是通常导线把地址信息、控制信息和数据信息传递至存储器的存储芯片中去的。在计算机中，专门有连接CPU和其它存储器芯片的导线，这些导线通常被称为总线。总线在物理上即一根根导线的集合，在逻辑上可以被划分为地址总线、控制总线和数据总线（这与上述CPU交互的三类信息相对应）。这里特别说明，存储器包括了内存、显存、网卡中的存储器等多种类型的存储器。</p><p>什么是逻辑存储器（内存地址空间）？<br>对CPU来讲，系统中所有物理存储器中的存储单元都处在一个统一的逻辑存储器中，这个逻辑存储器的容量大小受到CPU寻址能力的限制。如果一个CPU的地址总线宽度为10 ，则该CPU可以寻址的存储单元为1024个，这1024个可寻到的存储单元就构成了这个CPU的内存地址空间，也叫做逻辑存储器<br>一，数据传送指令集<br>MOV</p><p>功能: 把原操作数送给目的地操作数</p><p>语法: MOV 目前的操作数,源操作数</p><p>格式: MOV r1,r2</p><p>MOV r,m</p><p>MOV m,r</p><p>MOV r,data</p><p>XCHG</p><p>功能: 交换两个操作系统的数据</p><p>语法: XCHG</p><p>格式: XCHG r1,r2 XCHG m,r XCHG r,m</p><p>PUSH,POP</p><p>功能: 把操作数压入或取出堆栈</p><p>语法: PUSH 操作数 POP 操作数</p><p>格式: PUSH r PUSH M PUSH data POP r POP m</p><p>PUSHF,POPF,PUSHA,POPA</p><p>功能: 堆栈指令群</p><p>格式: PUSHF POPF PUSHA POPA</p><p>LEA,LDS,LES</p><p>功能: 取地址至寄存器</p><p>语法: LEA r,m LDS r,m LES r,m</p><p>XLAT(XLATB)</p><p>功能: 查表指令</p><p>语法: XLAT XLAT m</p><p>二，算数运算指令<br>ADD,ADC</p><p>功能: 加法指令</p><p>语法: ADD OP1,OP2 ADC OP1,OP2</p><p>格式: ADD r1,r2 ADD r,m ADD m,r ADD r,data</p><p>影响标志: C,P,A,Z,S,O</p><p>SUB,SBB</p><p>功能:减法指令</p><p>语法: SUB OP1,OP2 SBB OP1,OP2</p><p>格式: SUB r1,r2 SUB r,m SUB m,r SUB r,data SUB m,data</p><p>影响标志: C,P,A,Z,S,O</p><p>INC,DEC</p><p>功能: 把OP的值加一或减一</p><p>语法: INC OP DEC OP</p><p>格式: INC r&#x2F;m DEC r&#x2F;m</p><p>影响标志: P,A,Z,S,O</p><p>NEG</p><p>功能: 将OP的符号反相(取二进制补码)</p><p>语法: NEG OP</p><p>格式: NEG r&#x2F;m</p><p>影响标志: C,P,A,Z,S,O</p><p>MUL,IMUL</p><p>功能: 乘法指令</p><p>语法: MUL OP IMUL OP</p><p>格式: MUL r&#x2F;m IMUL r&#x2F;m</p><p>影响标志: C,P,A,Z,S,O(仅IMUL会影响S标志)</p><p>DIV,IDIV</p><p>功能:除法指令</p><p>语法: DIV OP IDIV OP</p><p>格式: DIV r&#x2F;m IDIV r&#x2F;m</p><p>CBW,CWD</p><p>功能: 有符号数扩展指令</p><p>语法: CBW CWD</p><p>AAA,AAS,AAM,AAD</p><p>功能: 非压BCD码运算调整指令</p><p>语法: AAA AAS AAM AAD</p><p>影响标志: A,C(AAA,AAS) S,Z,P(AAM,AAD)</p><p>DAA,DAS</p><p>功能: 压缩BCD码调整指令</p><p>语法: DAA DAS</p><p>影响标志: C,P,A,Z,S</p><p>三，位运算指令集<br>AND,OR,XOR,NOT,TEST</p><p>功能: 执行BIT与BIT之间的逻辑运算</p><p>语法: AND r&#x2F;m,r&#x2F;m&#x2F;data OR r&#x2F;m,r&#x2F;m&#x2F;data XOR r&#x2F;m,r&#x2F;m&#x2F;data TEST r&#x2F;m,r&#x2F;m&#x2F;data NOT r&#x2F;m</p><p>影响标志: C,O,P,Z,S(其中C与O两个标志会被设为0) NOT指令不影响任何标志位</p><p>SHR,SHL,SAR,SAL</p><p>功能: 移位指令</p><p>语法: SHR r&#x2F;m,data&#x2F;CL SHL r&#x2F;m,data&#x2F;CL SAR r&#x2F;m,data&#x2F;CL SAL r&#x2F;m,data&#x2F;CL</p><p>影响标志: C,P,Z,S,O</p><p>ROR,ROL,RCR,RCL</p><p>功能: 循环移位指令</p><p>语法: ROR r&#x2F;m,data&#x2F;CL ROL r&#x2F;m,data&#x2F;CL RCR r&#x2F;m,data&#x2F;CL RCL r&#x2F;m,data&#x2F;CL</p><p>影响标志: C,P,Z,S,O</p><p>程序流程控制指令集</p><p>CLC,STC,CMC</p><p>功能: 设定进位标志</p><p>语法: CLC STC CMC</p><p>标志位: C</p><p>CLD,STD</p><p>功能: 设定方向标志</p><p>语法: CLD STD</p><p>标志位: D</p><p>CLI,STI</p><p>功能: 设定中断标志</p><p>语法: CLI STI</p><p>标志位: I</p><p>CMP</p><p>功能: 比较OP1与OP2的值</p><p>语法: CMP r&#x2F;m,r&#x2F;m&#x2F;data</p><p>标志位: C,P,A,Z,O</p><p>JMP</p><p>功能: 跳往指定地址执行</p><p>语法: JMP 地址</p><p>JXX<br>功能: 当特定条件成立则跳往指定地址执行<br>语法: JXX 地址<br>注:</p><p>A: ABOVE,当C&#x3D;0,Z&#x3D;0时成立<br>B: BELOW,当C&#x3D;1时成立<br>C: CARRY,当弁时成立 CXZ: CX寄存器的值为0(ZERO)时成立<br>E: EQUAL,当Z&#x3D;1时成立<br>G: GREATER(大于),当Z&#x3D;0且S&#x3D;0时成立<br>L: LESS(小于),当S不为零时成立<br>N: NOT(相反条件),需和其它符号配合使用<br>O: OVERFLOW,O&#x3D;1时成立<br>P: PARITY,P&#x3D;1时成立<br>PE: PARITY EVEN,P&#x3D;1时成立<br>PO: PARITY ODD,P&#x3D;0时成立<br>S: SIGN,S&#x3D;1时成立<br>Z: ZERO,Z&#x3D;1时成立<br>LOOP</p><p>功能: 循环指令集</p><p>语法: LOOP 地址</p><p>LOOPE(Z)</p><p>地址 LOOPNE(Z) 地址</p><p>标志位: 无</p><p>CALL,RET</p><p>功能: 子程序调用,返回指令</p><p>语法: CALL 地址 RET RET n</p><p>标志位: 无</p><p>INT,IRET</p><p>功能: 中断调用及返回指令</p><p>语法: INT n IRET</p><p>标志位: 在执行INT时,CPU会自动将标志寄存器的值入栈,在执行IRET时则会将堆栈中的标志值弹回寄存器</p><p>字符串操作指令集</p><p>MOVSB,MOVSW,MOVSD</p><p>功能: 字符串传送指令</p><p>语法: MOVSB MOVSW MOVSD</p><p>标志位: 无</p><p>CMPSB,CMPSW,CMPSD</p><p>功能: 字符串比较指令</p><p>语法: CMPSB CMPSW CMPSD</p><p>标志位: C,P,Z,S,O</p><p>SCASB,SCASW</p><p>功能: 字符串搜索指令</p><p>语法: SCASB SCASW</p><p>标志位: C,P,Z,S,O</p><p>LODSB,LODSW,STOSB,STOSW</p><p>功能: 字符串载入或存贮指令</p><p>语法: LODSB LODSW STOSB STOSW</p><p>标志位: 无</p><p>REP,REPE,REPNE</p><p>功能: 重复前缀指令集</p><p>语法: REP 指令S REPE 指令S REPNE 指令S</p><p>标志位: 依指令S而定</p><p>对于IBM PC机它有它的指令系统，其中包括：数据传送指令、串处理指令、算术指令、控制移动指令、逻辑指令、处理机控制指令。</p><p>1)数据传送指令：</p><p>负责把数据、地址或立即数传送到寄存器或存储单元中。数据传送指令类型指令说明通用数据传送指令MOV（传送）、PUSH（进栈）、POP（出栈）、XCHG（交换）累加器专用传送指令 IN（输入指令） 、OUT（输入指令）地址传送指令 LEA（有效地址送寄存器）、LDS（指针送寄存器和DS）、LES（指针送寄存器和ES）标志寄存器传送指令 LAHF（标志送AH）、SAHF（AH送标志寄存器）、PUSHF（标志进栈）、POPF（标志出栈）</p><p>2）算术指令：</p><p>用来执行算术运算。算术指令类型指令说明加法指令 ADD（加法）、ADC（带进位加法）、INC（加1）减法指令 SUB（减法）、SBB（带借位减法）、DEC（减1）、NEG（求补）、CMP（比较）乘法指令 MUL（无符号数乘法）、IMUL（带符号数乘法）；除法指令 DIV（无符号数除法）、IDIV（带符号数除法）、CBW（字节转换为字）、CWD（字转换为双字）</p><p>3）逻辑指令：</p><p>对字或字节执行逻辑运算。逻辑指令类型指令说明逻辑运算指令 AND（逻辑与）、OR（逻辑或）、NOT（逻辑非）、XOR（异或）、TEST（测试）移动指令 SHL（逻辑左移）、SAL（算术左移）、SHR（逻辑右移）、SAR（算术右移）、ROL（循环左移）、ROR（循环右移）、RCL（带进位循环左移）、RCR（带进位右移）</p><p>4）串处理指令：</p><p>处理存放存储器里的数据串。串处理指令类型指令说明指令 MOVS（串传送）、CMPS（串比较）、SCAS（串扫描）、LODS（从串取）、STOS（存入串）</p><p>5）控制转移指令：</p><p>用来控制程序的执行流程。控制转移指令类型指令说明无条件转移指令JMP（段间和段内转移）条件转移指令 JZ（结果为0（或相等）则转移）、JS（结果为负则转移）、JNS（结果为正则转移）、JO（溢出则转移）、JNO（不溢出则转移）、JP（奇偶位为1则转移）、JNP（奇偶位为0则转移）循环指令 LOOP（循环指令）、LOOPPZ&#x2F;LOOPE（当为0或相等时循环指令）、LOOPNZ&#x2F;LOOPNE（当不为0或不相等时循环指令）子程序指令 CALL（调用指令）、RET（返回指令）中断指令 INT（中断）、INTO（如溢出则中断）、RIET（从中断返回）</p><p>6）处理机控制指令：</p><p>处理机控制指令类型指令说 明标志处理指令 CLC（进位位置0指令）、CMC（进位位求反指令）、STC（进位位置为1指令）、CLD（方向标志置1指令）、STD（方向标志位置1指令）、CLI（中断标志置0指令）、STI（中断标志置1指令）其他处理机控制指令 NOP（无操作）、HLT（停机）、WAIT（等待）、ESC（换码）、LOCK（封锁）</p><p>四，汇编语言程序格式<br>汇编语言源程序用语句书写，MASM中可使用的语句分成两类，他们是指令性语句和伪指令语句</p><p>1．指令性语句：指令性语句与机器指令相对应，汇编程序将他翻译成目标代码（机器指令代码）。语句格为：</p><p>标号： 指令助记符 操作数，操作数；注释</p><p>标号表示指令语句的符号地址，标号后面必须紧跟“：”。标号可以省略，他经常作为转移指令或CALL指令的一个操作数，用以表示地址的转移。</p><p>指令助记符是该语句的指令名称的代表号码，他指出操作的类型，汇编程序将其翻译成机器指令。不可省略。</p><p>操作数表示参加本指令的运算数据，根据指令的操作类型，操作数不同，中间必须用“，”隔开。</p><p>注释指明一条指令的功能，可以省略。</p><p>2．伪指令语句：伪指令语句没有对应的机器指令。汇编程序汇编源程序时对伪指令进行处理，他可以完成数据定义，存储区分配，段定义，段分配，指示程序结束功能。</p><p>伪指令语句的格式为：</p><p>名字 伪指令指示符 操作数，操作数；注释</p><p>名字时给伪指令取得名称，他用符号地址表示。伪指令中的名字通常是变量名，段名，过程名、符号名等。伪指令指示符是汇编程序MASM规定的符号。操作数是根据伪指令的具体要求来得。</p><p>3．数据项</p><p>汇编语言中使用的操作数，可以是常数、寄存器、存储器、变量、标号活表达式，其中藏书、变量和标号是三种基本数据项。</p><p>⑴常数必须是固定的值，没有属性，是确定的数据。</p><p>⑵变量在程序运行中是可以修改的。所有的变量具有三种属性</p><p>①段值（SEGMENT）：指明变量所在段的基址。</p><p>②段内偏移地址（OFFSET）：指变量所在地址与段首地址之间的偏移字节数。</p><p>③类型（TYPE）：变量的类型属性指变量中每个单元所包含的字节数，类型有：字节变量（BYTE）、字变量（WORD）、双字变量（DOUBLE WORD）</p><p>⑶标号：标号是指可执行指令语句的地址的符号表示，他可作为转移指令和调用指令的目标操作数，以确定程序转换的目标地址，他具有三个属性。</p><p>①段值（SEGMENT）：指明标号所在段的基址。</p><p>②段内偏移地址（OFFSET）：指标号所在地址与所在段段首地址之间的偏移字节数。</p><p>③类型（TYPE）：标号的类型属性指在转移指令中标号可转移的距离类型.NEAR，表示近标号只能实现在本代码段内转移或调用；FAR，表示远标号，可；以作为其他代码段中的目标地址，实现段间调用或转移。</p><p>五，伪指令汇总<br>1．数据定义语句</p><p>格式一：变量名 助记符 操作数，操作数…；注释<br>格式二：变量名 助记符 n DUP(操作数，操作数…)；注释<br>功能：将操作数存入变量名指定的存储单元中，或者只分配存储空间不存入数据。<br>变量名，用符号表示，可以省略。汇编程序时将此变量的助记符后的第一个字节的偏移地址作为他的符号地址。</p><p>助记符主要有：</p><p>DB：用来定义字节，表示每个操作数占用一个字节；<br>DW：用来定义字，表示每个操作数占用一个字；<br>DD：用来定义双字，表示每个操作数占用两个字；<br>DQ：用来定义四个字，表示每个操作数占用四个字；<br>DT：用来定义十个字节，表示每个操作数占用十个字节；<br>在格式二中，用n DUP表示时，n必须是整数，表示括号中的操作数的重复次数。DUP后面必须带括号。</p><p>2．表达式赋值语句</p><p>⑴赋值语句EQU</p><p>格式：符号名 EQU 表达式</p><p>功能：用来给变量、标号、常数、指令、表达式等定义一个符号名，程序中用到EQU左边得变量、标号时可以用右边的常数值或表达式来代替，但是一经定义在同一个程序模块中不能再重新定义。</p><p>⑵符号语句＝</p><p>符号语句“＝”与EQU语句具有相同功能，区别仅在于EQU中左边的标号不允许重新定义，而用“＝”定义的语句可以重新定义。</p><p>3段定义语句</p><p>存储器的物理地址由段基址和偏移地址组合而成，任何一个逻辑段，无论是数码段，数据段，堆栈段，附加段都必须定义。以便连接程序把不同阶段和模块连成一个可执行的程序。</p><p>⑴段定义语句SEGMENT…ENDS</p><p>格式：段名 SEGMENT 定位类型 组合类型 ‘分类名’</p><p>逻辑段内容</p><p>段名 ENDS</p><p>功能：将一个逻辑段定义成一个整体</p><p>段名，是逻辑段的标识符，不能省略。他确定了逻辑段在存储器中的地址。必须以SEGMENT开始，以ENDS结束，前后段名必须一致。</p><p>定位类型，定位类型参数是对该段起始地址的定位。定位类型参数主要有下面4种：</p><p>①PARA：指定定位段的起始地址必须在节的整数边界，当定位类型缺省时，就当成PARA<br>②BYTE：指定定位段的起始地址定位在存储单元的任何字节地址。<br>③WORD：指定定位段的起始地址定位在字的边界，即段的首地址必须是偶数。<br>④PAGE：指定定位段的起始地址定位在页的边界，即段的首地址必须是256的整数倍。<br>组合类型：组合类型参数主要提供了各个逻辑段之间的组合方式<br>①NONE：该段与其他同名段不进行连接，各段独立于存储器中，NONE可作为缺省参数。<br>②PUBLIC：该段与其他模块中的同名段连接时，由低地址到高地址连接起来，组成一个逻辑段，连接次序由连接命令指定。<br>③COMMON：该段在连接时与其他模块中的同名段有相同的起始地址，采用覆盖的方式在存储器中存放，连接长度为各分段中最大长度。<br>④AT表达式：定位该段的起始地址在表达式所指定的节（16的整数倍）边界上。当用户要求某个逻辑段在指定节的边界上时，就要用AT参数来实现。<br>⑤STACK：指定该段为堆栈段，此参数在堆栈段中不可省略。<br>⑥MEMORY：定位该段与其他模块中的同名段有相同的首地址，采用覆盖的方法在存储器中组合连接。其功能与COMMON相似，区别是第一个带MEMORY参数的逻辑段覆盖在其他同名段的最上层，其他带此参数的同名段按照COMMON方式处理。<br>⑶“分类名”（CLASS NAME）</p><p>其主要作用是汇编程序连接时将所有的分类名相同的逻辑段组成一个段组。</p><p>2．段分配语句（ASSUME）</p><p>格式：ASSUME CS:段名，DS:段名，SS:段名，ES:段名</p><p>功能：定义4个逻辑段，指明段和寄存器的关系。</p><p>3．过程定义语句</p><p>格式：过程名 PROC 属性</p><p>过程内容</p><p>RET N</p><p>过程名 ENDP</p><p>功能：定义一个过程，主程序可以用CALL 指令调用他</p><p>过程名：给所定义的过程取得名字，不可省略。像标号一样具有三个属性：段属性、偏移地址属性和距离属性。</p><p>RET N为过程内部的返回指令。过程中至少一条RET，可以在任何位置，使过程返回到主程序调用他的CALL指令之下的一条指令。N为弹出值，可以缺省，表示从程返回以后，堆栈中应有N个字节的值作废。</p><p>4．程序开始和结束语句</p><p>⑴NAME:</p><p>格式：NAME 程序名</p><p>功能：为源程序目标模块赋名字。</p><p>⑵TITLE</p><p>格式：TITLE 文本名</p><p>功能：将文本名赋给源程序目标模块作名字，功能同NAM…</p><p>⑶ORG</p><p>格式：ORG 表达式</p><p>功能：给汇编程序设置位置指针，指定下面语句的起始偏移地址。</p><p>⑷END</p><p>格式：END 标号名</p><p>功能：标记汇编源程序结束</p><p>5．外部伪指令及对准伪指令</p><p>程序中包含多个模块时，有些程序或数据在各个模块间要相互共享，可用外部伪指令PUBLIC和EXTRN来实现此功能。</p><p>⑴外部伪指令</p><p>PUBLIC用来定义共享模块，EXTAN用来调用共享模块</p><p>格式：PUBLIC 名称，名称，…</p><p>EXTRN 名称：类型，名称：类型…</p><p>⑵对准伪指令</p><p>格式：EVEN</p><p>功能：EVEN伪指令使下一语句的地址调整为偶地址<br>原文链接：<a href="https://blog.csdn.net/baishuiniyaonulia/article/details/78504758">https://blog.csdn.net/baishuiniyaonulia/article/details/78504758</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你好！世界</title>
    <link href="/2022/11/14/hello-world/"/>
    <url>/2022/11/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>c语言</title>
    <link href="/2022/11/12/C%E8%AF%AD%E8%A8%80/"/>
    <url>/2022/11/12/C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p> C语言中的输出格式类型</p><p>1、%d-以十进制形式输出带符号整数；</p><p>2、%o-以八进制形式输出无符号整数(不输出前缀O);</p><p>3、%x-以十六进制形式输出无符号整数(不输出前缀OX);</p><p>4、%u-以十进制形式输出无符号整数;</p><p>5、%f-以小数形式输出单、双精度实数;</p><p>6、%e-以指数形式输出单、双精度实数;</p><p>7、%g-以%f%e中较短的输出宽度输出单、双精度实数;</p><p>8、%c-输出单个字符;</p><p>9、%s-输出字符串;</p><p>下面给出一些常用符号的含义：</p><p>1、!-表示逻辑非或者取反；</p><p>2、#-表示预编译；</p><p>3、%-在输入输出格式化字符串中根据表面的字母表示特定的数据类型；</p><p>4、^-表示异或操作；</p><p>5、&amp;-表示引用或取地址；</p><p>6、*-表示乘或取值；</p><p>7、[ ]-取下标；</p><p>8、{ }-表示代码段；</p><p>break和continue的区别<br>1、break用于跳出一个循环体或者完全结束一个循环，不仅可以结束其所在的循环，还可结束其外层循环。<br>注意：<br>（1）只能在循环体内和switch语句体内使用break。<br>（2）不管是哪种循环，一旦在循环体中遇到break，系统将完全结束循环，开始执行循环之后的代码。<br>（3）当break出现在循环体中的switch语句体内时，起作用只是跳出该switch语句体，并不能终止循环体的执行。若想强行终止循环体的执行，可以在循环体中，但并不在switch语句中设置break语句，满足某种条件则跳出本层循环体。<br>2、continue语句的作用是跳过本次循环体中剩下尚未执行的语句，立即进行下一次的循环条件判定，可以理解为只是中止(跳过)本次循环，接着开始下一次循环。<br>注意：<br>（1）continue语句并没有使整个循环终止。<br>（2）continue 只能在循环语句中使用，即只能在 for、while 和 do…while 语句中使用</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从此进入网安大家庭</title>
    <link href="/2022/10/25/%E4%BB%8E%E6%AD%A4%E8%BF%9B%E5%85%A5%E7%BD%91%E5%AE%89%E5%A4%A7%E5%AE%B6%E5%BA%AD/"/>
    <url>/2022/10/25/%E4%BB%8E%E6%AD%A4%E8%BF%9B%E5%85%A5%E7%BD%91%E5%AE%89%E5%A4%A7%E5%AE%B6%E5%BA%AD/</url>
    
    <content type="html"><![CDATA[<p>我个人认为网安这个专业特别酷，听说这个专业对数学和物理要求很高，但是我的物理特别差，特别缺乏理科的哪种思维，<br>我在今日校园看了看我的培养计划发现了我们要修好多课程，感觉的得选一个我喜欢的方向去深入研究，加油吧！少年</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
